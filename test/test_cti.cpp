
#include <stdio.h>
#include <valarray>
#include <vector>

#include "catch2/catch.hpp"
#include "ccd.hpp"
#include "cti.hpp"
#include "roe.hpp"
#include "trap_managers.hpp"
#include "traps.hpp"
#include "util.hpp"

TEST_CASE("Test add CTI, compare with old arctic", "[cti]") {
    // Compare with the python version (which was itself tested against the
    // previous IDL version)
    std::valarray<std::valarray<double>> image_pre_cti, image_post_cti, image_py;
    std::vector<double> test, answer;
    int express;

    SECTION("Single single pixel, various express") {
        // Nice numbers for easier manual checking
        TrapInstantCapture trap(10.0, -1.0 / log(0.5));
        ROE roe(1.0, true, false, true);
        CCD ccd(1e3, 0.0, 1.0);
        image_pre_cti =
            std::valarray<std::valarray<double>>(std::valarray<double>(0.0, 1), 20);
        image_pre_cti[2][0] = 800.0;

        express = 1;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {776.000000000}, {15.920000000},
                    {9.999750000}, {6.029849250}, {3.534999123},   {2.030099496},
                    {1.147640621}, {0.640766014}, {0.354183414},   {0.194156908},
                    {0.105694167}, {0.057196805}, {0.030794351},   {0.016505772},
                    {0.008812535}, {0.004688787}, {0.002487011},   {0.001315498}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));

        express = 2;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {776.000000000}, {15.920000000},
                    {9.999750000}, {6.029849250}, {3.534999123},   {2.030099496},
                    {1.147640621}, {0.640766014}, {0.351503820},   {0.195205130},
                    {0.107691677}, {0.059344104}, {0.032651256},   {0.017931889},
                    {0.009828225}, {0.005375242}, {0.002933389},   {0.001597286}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));

        express = 5;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {776.000000000}, {15.920000000},
                    {9.944726500}, {6.044398638}, {3.575964224},   {2.077645109},
                    {1.187409621}, {0.673921772}, {0.380110626},   {0.213191168},
                    {0.118767760}, {0.066068705}, {0.036687898},   {0.020332300},
                    {0.011229112}, {0.006203726}, {0.003426735},   {0.001891689}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));

        express = 10;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {776.160000000}, {15.681200000},
                    {9.859558480}, {5.988455305}, {3.543547476},   {2.064161346},
                    {1.186023190}, {0.675948795}, {0.382161311},   {0.215111905},
                    {0.120479246}, {0.067318409}, {0.037493555},   {0.020858307},
                    {0.011579269}, {0.006425514}, {0.003560596},   {0.001973188}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));

        express = 20;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {776.239200000}, {15.603586518},
                    {9.849325322}, {5.992674142}, {3.557803028},   {2.076188299},
                    {1.196521151}, {0.683175954}, {0.387335013},   {0.218424309},
                    {0.122662696}, {0.068664350}, {0.038342031},   {0.021369444},
                    {0.011892776}, {0.006611546}, {0.003672650},   {0.002038991}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));
    }

    SECTION("Single pixel, far from readout, various express") {
        // Nice numbers for easier manual checking
        TrapInstantCapture trap(10.0, -1.0 / log(0.5));
        ROE roe(1.0, true, false, true);
        CCD ccd(1e3, 0.0, 0.5);
        image_pre_cti =
            std::valarray<std::valarray<double>>(std::valarray<double>(0.0, 1), 120);
        image_pre_cti[102][0] = 800.0;

        express = 2;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {0.000000000},  {0.000000000},
                    {0.000000000},   {0.000000000},   {42.680486315}, {250.980554962},
                    {161.809667140}, {107.464416415}, {73.096930884}, {50.659682086},
                    {35.632283609},  {25.371790601},  {18.267464741}, {13.298313130},
                    {9.795079318},   {7.307731336},   {5.528453916},  {4.244633069},
                    {3.308717162},   {2.618116075},   {2.101444416},  {1.708983555}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));

        express = 20;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {0.000000000},   {0.000000000},
                    {0.000000000},   {0.000000000},  {134.107315325}, {163.827380242},
                    {117.926133487}, {85.891835006}, {63.638338544},  {47.923577796},
                    {36.632080525},  {28.440968253}, {22.409766004},  {17.905473657},
                    {14.495542574},  {11.880330414}, {9.831083567},   {8.237234364},
                    {6.976338700},   {5.965092714},  {5.144674575},   {4.472341096}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));
    }

    SECTION("Single pixel, longer release time") {
        // Nice numbers for easier manual checking
        TrapInstantCapture trap(10.0, 5);
        ROE roe(1.0, true, false, true);
        CCD ccd(1e3, 0.0, 0.5);
        image_pre_cti =
            std::valarray<std::valarray<double>>(std::valarray<double>(0.0, 1), 40);
        image_pre_cti[2][0] = 800.0;

        express = 40;
        image_post_cti = clock_charge_in_one_direction(
            image_pre_cti, roe, ccd, std::valarray<Trap>{trap}, express);
        image_py = {{0.000000000}, {0.000000000}, {773.317606690}, {5.999125213},
                    {6.144729845}, {6.060553754}, {5.823556488},   {5.494554880},
                    {5.115565639}, {4.715930005}, {4.315646031},   {3.927879015},
                    {3.560848061}, {3.219238329}, {2.905252783},   {2.619390334},
                    {2.361016844}, {2.128779852}, {1.920905910},   {1.735410221},
                    {1.570241225}, {1.423377295}, {1.292888592},   {1.176973854},
                    {1.073979488}, {0.982406427}, {0.900908787},   {0.828287261},
                    {0.763479374}, {0.705548089}, {0.653669808},   {0.607122439},
                    {0.565273990}, {0.527571936}, {0.493533505},   {0.462736917},
                    {0.434813587}, {0.409441225}, {0.386337783},   {0.365256168}};
        REQUIRE_THAT(flatten(image_post_cti), Catch::Approx(flatten(image_py)));
    }
}
